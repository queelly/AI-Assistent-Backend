# Generated by Django 5.0.6 on 2024-06-13 12:42

from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="InvestPlace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("preferential_treatment", models.CharField(max_length=255, null=True)),
                ("preferential_treatment_id", models.PositiveIntegerField(null=True)),
                (
                    "preferential_treatment_name",
                    models.CharField(max_length=255, null=True),
                ),
                ("support_object_type", models.CharField(max_length=255, null=True)),
                ("support_object_id", models.PositiveIntegerField(null=True)),
                ("support_object_name", models.CharField(max_length=255, null=True)),
                ("region", models.CharField(max_length=255)),
                ("address", models.CharField(max_length=255)),
                ("nearest_city", models.CharField(max_length=255)),
                (
                    "place_type",
                    models.CharField(
                        choices=[("Земельный участок", "Field"), ("Помещение", "Room")],
                        max_length=255,
                    ),
                ),
                (
                    "novelty_type",
                    models.CharField(
                        choices=[
                            ("Гринфилд", "Greenfield"),
                            ("Браунфилд", "Brownfield"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "ownership",
                    models.CharField(
                        choices=[
                            ("Частная", "Private"),
                            ("Государственная до разграничения", "Gov"),
                            ("Муниципальная", "City"),
                            ("Региональная", "Region"),
                        ],
                        max_length=255,
                    ),
                ),
                (
                    "trade_type",
                    models.CharField(
                        choices=[
                            ("Продажа через аукцион", "Auction Sale"),
                            ("Аренда через аукцион", "Auction Rent"),
                            ("Продажа", "Sale"),
                            ("Аренда", "Rent"),
                        ],
                        max_length=255,
                    ),
                ),
                ("price", models.FloatField()),
                ("year_price_ga", models.FloatField(null=True)),
                ("year_price_m2", models.FloatField(null=True)),
                ("rent_time_constraits", models.CharField(max_length=255, null=True)),
                ("price_setting_rule", models.CharField(max_length=255, null=True)),
                ("danger_class", models.CharField(max_length=255, null=True)),
                (
                    "capital_constructions_description",
                    models.TextField(max_length=1023, null=True),
                ),
                ("free_land_ga", models.FloatField(null=True)),
                ("cadastral_number_land", models.CharField(max_length=255, null=True)),
                ("allowed_buisnesses", models.TextField(max_length=1023, null=True)),
                ("surveying", models.BooleanField(null=True)),
                ("land_category", models.CharField(max_length=255, null=True)),
                ("free_room_m2", models.FloatField(null=True)),
                ("cadastral_number_room", models.CharField(max_length=255, null=True)),
                ("tech_building_characteristics", models.TextField(null=True)),
                ("owner_name", models.CharField(max_length=255)),
                ("owner_inn", models.PositiveIntegerField()),
                ("owner_url", models.URLField()),
                ("note", models.TextField()),
                (
                    "water_supply",
                    models.CharField(
                        choices=[
                            ("Да", "Yes"),
                            ("Нет", "No"),
                            ("Возможно создание", "Ability"),
                        ],
                        max_length=255,
                    ),
                ),
                ("water_cost", models.FloatField(null=True)),
                ("water_cost_transportation", models.FloatField(null=True)),
                ("water_facilities_max_power", models.FloatField(null=True)),
                ("water_facilities_free_power", models.FloatField(null=True)),
                ("water_facilities_note", models.TextField(null=True)),
                ("water_throughput", models.FloatField(null=True)),
                (
                    "sewage_supply",
                    models.CharField(
                        choices=[
                            ("Да", "Yes"),
                            ("Нет", "No"),
                            ("Возможно создание", "Ability"),
                        ],
                        max_length=255,
                    ),
                ),
                ("sewage_cost", models.FloatField(null=True)),
                ("sewage_cost_transportation", models.FloatField(null=True)),
                ("sewage_facilities_max_power", models.FloatField(null=True)),
                ("sewage_facilities_free_power", models.FloatField(null=True)),
                ("sewage_facilities_note", models.TextField(null=True)),
                ("sewage_throughput", models.FloatField(null=True)),
                (
                    "gas_supply",
                    models.CharField(
                        choices=[
                            ("Да", "Yes"),
                            ("Нет", "No"),
                            ("Возможно создание", "Ability"),
                        ],
                        max_length=255,
                    ),
                ),
                ("gas_cost", models.CharField(max_length=255, null=True)),
                (
                    "gas_cost_transportation",
                    models.CharField(max_length=255, null=True),
                ),
                ("gas_facilities_max_power", models.FloatField(null=True)),
                ("gas_facilities_free_power", models.FloatField(null=True)),
                ("gas_facilities_note", models.TextField(null=True)),
                ("gas_throughput", models.FloatField(null=True)),
                (
                    "electricity_supply",
                    models.CharField(
                        choices=[
                            ("Да", "Yes"),
                            ("Нет", "No"),
                            ("Возможно создание", "Ability"),
                        ],
                        max_length=255,
                    ),
                ),
                ("electricity_cost", models.CharField(max_length=255, null=True)),
                (
                    "electricity_cost_transportation",
                    models.CharField(max_length=255, null=True),
                ),
                ("electricity_facilities_max_power", models.FloatField(null=True)),
                ("electricity_facilities_free_power", models.FloatField(null=True)),
                ("electricity_facilities_note", models.TextField(null=True)),
                ("electricity_throughput", models.FloatField(null=True)),
                (
                    "heat_supply",
                    models.FloatField(
                        choices=[
                            ("Да", "Yes"),
                            ("Нет", "No"),
                            ("Возможно создание", "Ability"),
                        ],
                        max_length=255,
                    ),
                ),
                ("heat_cost", models.CharField(max_length=255, null=True)),
                (
                    "heat_cost_transportation",
                    models.CharField(max_length=255, null=True),
                ),
                ("heat_facilities_max_power", models.FloatField(null=True)),
                ("heat_facilities_free_power", models.FloatField(null=True)),
                ("heat_facilities_note", models.TextField(null=True)),
                ("heat_throughput", models.FloatField(null=True)),
                ("tko_availability", models.BooleanField(null=True)),
                ("tko_cost_ton", models.FloatField(null=True)),
                ("tko_cost_m3", models.FloatField(null=True)),
                ("access_roads_availability", models.BooleanField(null=True)),
                ("raild_roads_availability", models.BooleanField(null=True)),
                ("cargo_parking_availability", models.BooleanField(null=True)),
                ("other_characteristics", models.TextField(null=True)),
                ("application_process_description", models.TextField(null=True)),
                ("application_documents", models.TextField(null=True)),
                ("application_url", models.URLField()),
                ("possible_businesses", models.TextField(null=True)),
                (
                    "urban_planning_characteristics_and_limitations",
                    models.TextField(null=True),
                ),
                (
                    "territorial_planining_documents",
                    models.CharField(max_length=255, null=True),
                ),
                ("other_information", models.TextField(null=True)),
                ("photos_object_url", models.TextField(max_length=1000, null=True)),
                (
                    "availability_maip",
                    models.CharField(
                        choices=[("Да", "Yes"), ("Нет", "No")], max_length=255
                    ),
                ),
                ("description_benefit", models.TextField(null=True)),
                ("coordinates", models.CharField(max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="RegionalSupportsMeasures",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region", models.CharField(max_length=30, null=True)),
                ("name", models.CharField(max_length=200, null=True)),
                ("support_level", models.CharField(max_length=200, null=True)),
                ("main_idea", models.CharField(max_length=1000, null=True)),
                ("npa_requisite", models.CharField(max_length=1000, null=True)),
                ("npa_url", models.URLField(max_length=1000, null=True)),
                ("npa_download_url", models.URLField(max_length=1000, null=True)),
                ("application_form_link", models.URLField(max_length=1000, null=True)),
                (
                    "name_of_the_responsible_authority",
                    models.CharField(max_length=200, null=True),
                ),
                ("min_investment_volume", models.CharField(max_length=100, null=True)),
                ("okved", models.CharField(max_length=2000, null=True)),
                (
                    "restrictions_on_type_of_activities",
                    models.CharField(max_length=2000, null=True),
                ),
                (
                    "required_entry_into_sme",
                    models.CharField(
                        choices=[("Да", "Yes"), ("Нет", "No")], max_length=255
                    ),
                ),
                (
                    "requirements_for_the_applicant",
                    models.CharField(max_length=1000, null=True),
                ),
                ("application_procedure", models.CharField(max_length=1000, null=True)),
                ("required_documents", models.CharField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="SpecialEconomicsZonesAndTechn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_category", models.CharField(max_length=200)),
                ("sez", models.CharField(max_length=200, null=True)),
                ("top", models.CharField(max_length=50, null=True)),
                ("name", models.CharField(max_length=500, null=True)),
                ("region", models.CharField(max_length=50, null=True)),
                ("municipal_formation", models.CharField(max_length=300, null=True)),
                ("nearest_city", models.CharField(max_length=70, null=True)),
                ("number_residents", models.PositiveIntegerField()),
                ("photos_object_url", models.URLField(max_length=1000, null=True)),
                ("documents_object_url", models.URLField(max_length=1000, null=True)),
                ("year_object_formation", models.IntegerField(null=True)),
                ("validation_period_object", models.DateField(null=True)),
                ("total_area", models.IntegerField(null=True)),
                ("minimal_rental_price", models.IntegerField(null=True)),
                (
                    "possibility_buying_premises",
                    models.CharField(
                        choices=[("да", "Yes"), ("нет", "No")], max_length=255
                    ),
                ),
                ("list_industries", models.TextField(null=True)),
                ("restrictions_on_types_activities", models.TextField(null=True)),
                ("infrastructure_and_services", models.TextField(null=True)),
                ("additional_services_management_company", models.TextField(null=True)),
                ("name_admin_object", models.CharField(max_length=500, null=True)),
                ("address_admin_object", models.CharField(max_length=500, null=True)),
                ("link_site", models.URLField(max_length=100, null=True)),
                ("working_hours", models.CharField(max_length=255, null=True)),
                ("income_tax", models.CharField(max_length=100)),
                ("property_tax", models.CharField(max_length=100, null=True)),
                ("land_tax", models.CharField(max_length=100, null=True)),
                ("transport_tax", models.CharField(max_length=100, null=True)),
                ("insurance_premiums", models.CharField(max_length=100, null=True)),
                ("other_benefits", models.TextField(max_length=500, null=True)),
                (
                    "availability_of_a_free_customs_zone",
                    models.CharField(
                        choices=[("да", "Yes"), ("нет", "No")], max_length=255
                    ),
                ),
                (
                    "how_to_become_a_residents",
                    models.TextField(max_length=500, null=True),
                ),
                (
                    "minimum_investment_amount",
                    models.CharField(max_length=200, null=True),
                ),
                ("coordinates", models.CharField(max_length=255, null=True)),
            ],
        ),
    ]
